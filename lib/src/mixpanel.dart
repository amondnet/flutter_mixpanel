import 'dart:async';

import 'package:flutter/services.dart';
import 'package:flutter_mixpanel/src/mixpanel_message_codec.dart';
import 'package:flutter_mixpanel/src/mixpanel_type.dart';

class FlutterMixpanel {
  static const MethodChannel _channel = const MethodChannel(
      'net.amond.flutter_mixpanel',
      StandardMethodCodec(MixpanelMessageCodec()));

  static const FlutterMixpanelPeople people = const FlutterMixpanelPeople();

  static Future<String> initialize(String token) async {
    String response = await _channel.invokeMethod('initialize', token);
    return response;
  }

  static Future<String> track(String event,
      [Map<String, dynamic> properties]) async {
    final track = Track(event, properties: properties);
    try {
      final response = await _channel.invokeMethod('track', track.toJson());
      return response;
    } catch (e) {
      throw e;
    }
  }

  static Future<String> time(String event) async {
    try {
      final response =
          await _channel.invokeMethod('time', Time(event).toJson());
      return response;
    } catch (e) {
      throw e;
    }
  }

  static Future<String> identify(String distinctId) async {
    final response = await _channel.invokeMethod('identify', distinctId);
    return response;
  }

  /// Reset generates a new random distinct_id and clears super properties.
  /// Call reset to clear data attributed to a user when that user logs out.
  /// This allows you to handle multiple users on a single device.
  /// For more information about maintaining user identity,
  /// see the Identity Management: [Best Practices article](https://help.mixpanel.com/hc/en-us/articles/115004497803).
  static Future<void> reset() async {
    final response = await _channel.invokeMethod('reset', {});
    return response;
  }

  static Future<void> flush() async {
    return await _channel.invokeMethod('flush', {});
  }

  /// The [alias] method creates an alias which Mixpanel will use to remap one id to another.
  /// Multiple aliases can point to the same identifier.
  /// This function creates a distinct_id alias from alias to original.
  /// If original is null, then it will create an alias to the current events [distinct_id],
  /// which may be the [distinct_id] randomly generated by the Mixpanel library before [identify] (String) is called.
  /// [alias] : the new [distinct_id] that should represent original.
  /// [original] : optional, the old [distinct_id] that alias will be mapped to.
  static Future<void> alias(String alias, [String original]) async {
    assert(alias != null);
    assert(alias.isNotEmpty);

    return await _channel.invokeMethod(
        'alias', {'alias': alias, 'original': original ?? await distinctId});
  }

  /// Returns the string id currently being used to uniquely identify the user associated with events sent using track(String, JSONObject).
  /// Before any calls to identify(String), this will be an id automatically generated by the library.
  /// The id returned by [distinctId] is independent of the distinct id used to identify any People Analytics properties in Mixpanel.
  /// To read and write that identifier, use MixpanelAPI.People.identify(String) and MixpanelAPI.People.getDistinctId().
  static Future<String> get distinctId {
    return FlutterMixpanel._channel.invokeMethod<String>('distinctId', {});
  }
}

class FlutterMixpanelPeople {
  const FlutterMixpanelPeople();

  // identify must be called before
  // user profile properties can be set
  Future<void> identify(String id) async {
    await FlutterMixpanel._channel.invokeMethod('people.identify', id);
    return;
  }

  Future<void> set(Map<String, dynamic> properties) async {
    await FlutterMixpanel._channel
        .invokeMethod('people.setProperties', properties);
    return;
  }

  Future<void> setProperty(String property, dynamic to) async {
    await FlutterMixpanel._channel
        .invokeMethod('people.setProperty', {'property': property, 'to': to});
    return;
  }

  Future<void> setOnce(Map<String, dynamic> properties) async {
    await FlutterMixpanel._channel.invokeMethod('people.setOnce', properties);
    return;
  }

  Future<void> unset(List<String> properties) async {
    await FlutterMixpanel._channel.invokeMethod('people.unset', properties);
    return;
  }

  Future<void> append(String name, dynamic value) async {
    await FlutterMixpanel._channel.invokeMethod('people.append', {name: value});
    return;
  }

  Future<void> increment(Map<String, num> properties) async {
    await FlutterMixpanel._channel.invokeMethod('people.increment', properties);
    return;
  }

  Future<void> union(Map<String, List<dynamic>> properties) async {
    await FlutterMixpanel._channel.invokeMethod('people.union', properties);
    return;
  }

  /// (Android Only) Returns the string id currently being used to uniquely identify the user associated with events sent using set(String, Object) and increment(String, double). If no calls to identify(String) have been made, this method will return null.
  /// The id returned by getDistinctId is independent of the distinct id used to identify any events sent with MixpanelAPI.track(String, JSONObject). To read and write that identifier, use MixpanelAPI.identify(String) and MixpanelAPI.getDistinctId().
  Future<String> get distinctId async {
    return await FlutterMixpanel._channel.invokeMethod('people.distinctId', {});
  }
}
